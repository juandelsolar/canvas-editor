import { ImageDisplay } from '../../dataset/enum/Control';
import { EditorMode, EditorZone, PageMode, PaperDirection } from '../../dataset/enum/Editor';
import { ListStyle, ListType } from '../../dataset/enum/List';
import { RowFlex } from '../../dataset/enum/Row';
import { TableBorder, TdBorder, TdSlash } from '../../dataset/enum/table/Table';
import { TitleLevel } from '../../dataset/enum/Title';
import { VerticalAlign } from '../../dataset/enum/VerticalAlign';
import { ICatalog } from '../../interface/Catalog';
import { DeepRequired } from '../../interface/Common';
import { IGetControlValueOption, IGetControlValueResult, ISetControlExtensionOption, ISetControlHighlightOption, ISetControlValueOption } from '../../interface/Control';
import { IAppendElementListOption, IDrawImagePayload, IForceUpdateOption, IGetImageOption, IGetValueOption, IPainterOption } from '../../interface/Draw';
import { IEditorData, IEditorHTML, IEditorOption, IEditorResult, IEditorText } from '../../interface/Editor';
import { IElement } from '../../interface/Element';
import { IPasteOption } from '../../interface/Event';
import { IMargin } from '../../interface/Margin';
import { IRange, RangeContext } from '../../interface/Range';
import { IWatermark } from '../../interface/Watermark';
import { Draw } from '../draw/Draw';
import { INavigateInfo } from '../draw/interactive/Search';
export declare class CommandAdapt {
    private draw;
    private range;
    private position;
    private historyManager;
    private canvasEvent;
    private tableTool;
    private options;
    private control;
    private workerManager;
    private searchManager;
    private i18n;
    constructor(draw: Draw);
    mode(payload: EditorMode): void;
    cut(): void;
    copy(): void;
    paste(payload?: IPasteOption): void;
    selectAll(): void;
    backspace(): void;
    setRange(startIndex: number, endIndex: number, tableId?: string, startTdIndex?: number, endTdIndex?: number, startTrIndex?: number, endTrIndex?: number): void;
    replaceRange(range: IRange): void;
    setPositionContext(range: IRange): void;
    forceUpdate(options?: IForceUpdateOption): void;
    blur(): void;
    undo(): void;
    redo(): void;
    painter(options: IPainterOption): void;
    applyPainterStyle(): void;
    format(): void;
    font(payload: string): void;
    size(payload: number): void;
    sizeAdd(): void;
    sizeMinus(): void;
    bold(): void;
    italic(): void;
    underline(): void;
    strikeout(): void;
    superscript(): void;
    subscript(): void;
    color(payload: string): void;
    highlight(payload: string): void;
    title(payload: TitleLevel | null): void;
    list(listType: ListType | null, listStyle?: ListStyle): void;
    rowFlex(payload: RowFlex): void;
    rowMargin(payload: number): void;
    insertTable(row: number, col: number): void;
    insertTableTopRow(): void;
    insertTableBottomRow(): void;
    insertTableLeftCol(): void;
    insertTableRightCol(): void;
    deleteTableRow(): void;
    deleteTableCol(): void;
    deleteTable(): void;
    mergeTableCell(): void;
    cancelMergeTableCell(): void;
    tableTdVerticalAlign(payload: VerticalAlign): void;
    tableBorderType(payload: TableBorder): void;
    tableTdBorderType(payload: TdBorder): void;
    tableTdSlashType(payload: TdSlash): void;
    tableTdBackgroundColor(payload: string): void;
    tableSelectAll(): void;
    hyperlink(payload: IElement): void;
    getHyperlinkRange(): [number, number] | null;
    deleteHyperlink(): void;
    cancelHyperlink(): void;
    editHyperlink(payload: string): void;
    separator(payload: number[]): void;
    pageBreak(): void;
    addWatermark(payload: IWatermark): void;
    deleteWatermark(): void;
    image(payload: IDrawImagePayload): void;
    search(payload: string | null): void;
    searchNavigatePre(): void;
    searchNavigateNext(): void;
    getSearchNavigateInfo(): null | INavigateInfo;
    replace(payload: string): void;
    print(): Promise<void>;
    replaceImageElement(payload: string): void;
    saveAsImageElement(): void;
    changeImageDisplay(element: IElement, display: ImageDisplay): void;
    getImage(payload?: IGetImageOption): Promise<string[]>;
    getOptions(): DeepRequired<IEditorOption>;
    getValue(options?: IGetValueOption): IEditorResult;
    getHTML(): IEditorHTML;
    getText(): IEditorText;
    getWordCount(): Promise<number>;
    getRangeText(): string;
    getRangeContext(): RangeContext | null;
    getRangeRow(): IElement[] | null;
    getRangeParagraph(): IElement[] | null;
    getKeywordRangeList(payload: string): IRange[];
    pageMode(payload: PageMode): void;
    pageScaleRecovery(): void;
    pageScaleMinus(): void;
    pageScaleAdd(): void;
    paperSize(width: number, height: number): void;
    paperDirection(payload: PaperDirection): void;
    getPaperMargin(): number[];
    setPaperMargin(payload: IMargin): void;
    insertElementList(payload: IElement[]): void;
    appendElementList(elementList: IElement[], options?: IAppendElementListOption): void;
    setValue(payload: Partial<IEditorData>): void;
    removeControl(): void;
    setLocale(payload: string): void;
    getLocale(): string;
    getCatalog(): Promise<ICatalog | null>;
    locationCatalog(titleId: string): void;
    wordTool(): void;
    setHTML(payload: Partial<IEditorHTML>): void;
    setGroup(): string | null;
    deleteGroup(groupId: string): void;
    getGroupIds(): Promise<string[]>;
    locationGroup(groupId: string): void;
    setZone(zone: EditorZone): void;
    getControlValue(payload: IGetControlValueOption): IGetControlValueResult | null;
    setControlValue(payload: ISetControlValueOption): void;
    setControlExtension(payload: ISetControlExtensionOption): void;
    setControlHighlight(payload: ISetControlHighlightOption): void;
    getContainer(): HTMLDivElement;
}
